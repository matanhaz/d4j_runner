name: generate_matrixes
on:
  issues:
    types: [opened]
# on:
#   workflow_dispatch:
#     inputs:
#         project:
#           description: 'name of repository'
#           required: true
#           default: 'Csv'

jobs:
  build0:
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      # matrix:
      #     project: [Csv]
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'

    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          show-progress: false
      - name: Run a multi-line script
        run: |
          sudo apt update
          sudo apt-get update
          sudo snap install discord
          sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat maven --fix-missing
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.34'

          
      - name: create folders
        run: |
              import os
              os.mkdir(os.path.join('.','Commands'))
        shell: python
        

      # - uses: AdoptOpenJDK/install-jdk@v1
      #   with:
      #     version: '8'
          
      # - uses: AdoptOpenJDK/install-jdk@v1
      #   with:
      #     version: '17'
      #     targets: './Java'

      - uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: |
            11
            17
            8
            
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

       
      - name: Checkout d4j
        uses: actions/checkout@v4
        with:
          repository: rjust/defects4j
          ref: 'v2.1.0'
          path: .
          fetch-depth: 0
          show-progress: false


      - name: Install dependencies
        run: |
          cpanm --installdeps .
          ./init.sh
          echo "/framework/bin" >> $GITHUB_PATH
     #     export PATH=$PATH:./framework/bin



      - name: download requirements
        run: |
              pip install tqdm
              pip install pydriller
                
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          show-progress: false
          path: Commands
          
      - name: see all
        run: |
              echo $JAVA_HOME
              echo $JAVA_HOME_17
              ls -R "/opt/hostedtoolcache/Java_Adopt_jdk"
        
      - name: run commands
        run: |
              cd `git rev-parse --show-toplevel`
              cd Commands
              mkdir Projects
              chmod +x ./commands.sh
              chmod +x ./clone_projects.sh
              chmod +x ./create_directories.sh
              chmod +x ./extract_components.sh
              chmod +x ./extract_coverage.sh
              chmod +x ./extract_patch.sh
              chmod +x ./extract_projects.sh
              chmod +x ./extract_tests.sh
              ./commands.sh ${{github.event.issue.title}} ${{ github.workspace }}/framework/bin "/opt/hostedtoolcache/Java_Adopt_jdk/17.0.12-7/x64/bin/java"
       #       ./commands.sh ${{github.event.inputs.project}} ${{ github.workspace }}/framework/bin "/opt/hostedtoolcache/Java_Adopt_jdk/17.0.11-9/x64/bin/java.exe"
        shell: bash
        
      - name: run commands
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir "ActiveBugs"
              PROJECT=${{github.event.issue.title}}
              IFS="-" read -ra parts <<< "$PROJECT"
              PROJECT_FOLDER="${parts[0]}"
              perl ${{ github.workspace }}/framework/bin/defects4j query -p $PROJECT_FOLDER -q "bug.id,revision.id.buggy,revision.id.fixed,report.id" -o ${{ github.workspace }}/ActiveBugs/active-bugs.csv -A

      - name: Script
        run: |
              import csv
              import os
              csv_path = os.path.join('.','ActiveBugs', 'active-bugs.csv')
              topics = ["bug.id", "revision.id.buggy", "revision.id.fixed", "report.id"]
              with open(csv_path, 'r', newline='') as file:
                  reader = csv.reader(file)
                  data = list(reader)
          
              data.insert(0, topics)
          
              with open(csv_path, 'w', newline='') as file:
                  writer = csv.writer(file)
                  writer.writerows(data)
         
        shell: python
        
      - name: run script
        run: |
              cd `git rev-parse --show-toplevel`
              cd "Commands"
              mkdir "Matrixes"
              python ./parseXML.py
        
      - name: copy file
        run: |
              PROJECT=${{github.event.issue.title}}
              IFS="-" read -ra parts <<< "$PROJECT"
              PROJECT_FOLDER="${parts[0]}"
              cp ${{ github.workspace }}/ActiveBugs/active-bugs.csv ${{ github.workspace }}/Commands/Matrixes/$PROJECT_FOLDER/active-bugs.csv

      
      - name: Upload
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: ${{github.event.issue.title}}_ActiveBugs
          # A file, directory or wildcard pattern that describes what to upload
          path: ./ActiveBugs
          
      - name: Upload
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: Old_data
          # A file, directory or wildcard pattern that describes what to upload
          path: Commands/Projects
          
      - name: Upload
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: ${{github.event.issue.title}}
          # A file, directory or wildcard pattern that describes what to upload
          path: Commands/Matrixes

